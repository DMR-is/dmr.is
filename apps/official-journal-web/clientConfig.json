{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/applications/health": {
      "get": {
        "operationId": "health",
        "summary": "Health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/api/v1/applications/{id}": {
      "get": {
        "operationId": "getApplication",
        "summary": "Get application by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Application" }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateApplication",
        "summary": "Update answers of an application.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Id of the application to update.",
            "allowEmptyValue": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Update application body, answers to update.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateApplicationBody" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Application" }
              }
            }
          }
        }
      }
    },
    "/api/v1/applications/{id}/submit": {
      "put": {
        "operationId": "submitApplication",
        "summary": "Submit application by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Id of the application to submit.",
            "allowEmptyValue": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Submit application body, approve or reject the application.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SubmitApplicationBody" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Application" }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/case": {
      "get": {
        "operationId": "getCase",
        "summary": "Get case by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Case by ID.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Case" }
              }
            }
          },
          "404": { "description": "Case not found." }
        }
      }
    },
    "/api/v1/cases/cases": {
      "get": {
        "operationId": "getCases",
        "summary": "Get cases.",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for in cases.",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": { "type": "number" }
          },
          {
            "name": "caseNumber",
            "required": false,
            "in": "query",
            "description": "Case number to filter on, takes into account `caseNumber` on `Case`.",
            "schema": { "type": "number" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Status to filter cases on, takes into account `status` on `Case`.",
            "schema": {
              "enum": [
                "Innsent",
                "Grunnvinnsla",
                "Yfirlestur",
                "Tilbúið",
                "Útgefið",
                "Tekið úr birtingu",
                "Birtingu hafnað"
              ],
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Id of the employee to filter cases on, takes into account `employeeId` on `Case` and `CaseComment`.",
            "schema": { "type": "string" }
          },
          {
            "name": "published",
            "required": false,
            "in": "query",
            "description": "Boolean to filter cases on, takes into account `published` on `Case`.",
            "schema": { "type": "string" }
          },
          {
            "name": "fastTrack",
            "required": false,
            "in": "query",
            "description": "Boolean to filter cases on, takes into account `fastTrack` on `Case`.",
            "schema": { "type": "string" }
          },
          {
            "name": "institution",
            "required": false,
            "in": "query",
            "description": "Institution to filter cases on, takes into account `institution` on `Case`.",
            "schema": { "type": "string" }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Date from which to filter adverts on, inclusive, takes into account `createdDate`, `updatedDate` and `signatureDate`.",
            "schema": { "type": "string" }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Date to which to filter adverts on, inclusive, takes into account `createdDate`, `updatedDate` and `signatureDate`.",
            "schema": { "type": "string" }
          },
          {
            "name": "department",
            "required": false,
            "in": "query",
            "description": "Department to filter cases on, takes into account `department` on `Advert`.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "All cases.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetCasesReponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/users": {
      "get": {
        "operationId": "getUsers",
        "summary": "Get users.",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for user.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "All active users.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetUsersResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/editorialOverview": {
      "get": {
        "operationId": "getEditorialOverview",
        "summary": "Get overview for cases in progress.",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for in cases.",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": { "type": "number" }
          },
          {
            "name": "caseNumber",
            "required": false,
            "in": "query",
            "description": "Case number to filter on, takes into account `caseNumber` on `Case`.",
            "schema": { "type": "number" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Status to filter cases on, takes into account `status` on `Case`.",
            "schema": {
              "enum": [
                "Innsent",
                "Grunnvinnsla",
                "Yfirlestur",
                "Tilbúið",
                "Útgefið",
                "Tekið úr birtingu",
                "Birtingu hafnað"
              ],
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Id of the employee to filter cases on, takes into account `employeeId` on `Case` and `CaseComment`.",
            "schema": { "type": "string" }
          },
          {
            "name": "published",
            "required": false,
            "in": "query",
            "description": "Boolean to filter cases on, takes into account `published` on `Case`.",
            "schema": { "type": "string" }
          },
          {
            "name": "fastTrack",
            "required": false,
            "in": "query",
            "description": "Boolean to filter cases on, takes into account `fastTrack` on `Case`.",
            "schema": { "type": "string" }
          },
          {
            "name": "institution",
            "required": false,
            "in": "query",
            "description": "Institution to filter cases on, takes into account `institution` on `Case`.",
            "schema": { "type": "string" }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Date from which to filter adverts on, inclusive, takes into account `createdDate`, `updatedDate` and `signatureDate`.",
            "schema": { "type": "string" }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Date to which to filter adverts on, inclusive, takes into account `createdDate`, `updatedDate` and `signatureDate`.",
            "schema": { "type": "string" }
          },
          {
            "name": "department",
            "required": false,
            "in": "query",
            "description": "Department to filter cases on, takes into account `department` on `Advert`.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Cases overview.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseEditorialOverview"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/publish": {
      "post": {
        "operationId": "postPublish",
        "summary": "Publish cases",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostCasePublishBody" }
            }
          }
        },
        "responses": {
          "200": { "description": "Cases published" },
          "400": { "description": "Bad request" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/v1/cases/{caseId}/comments": {
      "get": {
        "operationId": "getComments",
        "summary": "Get case comments",
        "parameters": [
          {
            "name": "caseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "description": "Type of the comment",
            "required": false,
            "name": "type",
            "in": "query",
            "schema": {
              "enum": ["internal", "external", "all"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comments for case",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CaseComment" }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addComment",
        "summary": "Add comment to case",
        "parameters": [
          {
            "name": "caseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostCaseComment" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CaseComment" }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{caseId}/comments/{commentId}": {
      "delete": {
        "operationId": "deleteComment",
        "summary": "Delete comment from case",
        "parameters": [
          {
            "name": "caseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CaseComment" }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthController_health",
        "parameters": [],
        "responses": { "200": { "description": "Health check endpoint." } }
      }
    },
    "/api/v1/statistics/department": {
      "get": {
        "operationId": "StatisticsController_department",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets statistics for individual department (a, b or c)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStatisticsDepartmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/statistics/overview": {
      "get": {
        "operationId": "StatisticsController_overview",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets overview of statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStatisticsOverviewResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/advert": {
      "get": {
        "operationId": "JournalController_advert",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Advert by ID.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Advert" }
              }
            }
          },
          "404": {
            "description": "Advert not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AdvertNotFound" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/adverts": {
      "get": {
        "operationId": "JournalController_adverts",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for in adverts.",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to return.",
            "schema": { "type": "number" }
          },
          {
            "name": "department",
            "required": false,
            "in": "query",
            "description": "One or more departments (by `slug`) to filter on.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "One or more types (by `slug`) to filter on.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "One or more categories (by `slug`) to filter on.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "involvedParty",
            "required": false,
            "in": "query",
            "description": "One or more involved parties (by `slug`) to filter on.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Date from which to filter adverts on, inclusive, takes into account `createdDate`, `updatedDate` and `signatureDate`.",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Date to which to filter adverts on, inclusive, takes into account `createdDate`, `updatedDate` and `signatureDate`.",
            "schema": { "format": "date-time", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of adverts, optional query parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetAdvertsResponse" }
              }
            }
          },
          "400": {
            "description": "Query string validation failed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/departments": {
      "get": {
        "operationId": "JournalController_departments",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for in departments.",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to return.",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of departments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDepartmentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Query string validation failed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/types": {
      "get": {
        "operationId": "JournalController_types",
        "parameters": [
          {
            "name": "department",
            "required": false,
            "in": "query",
            "description": "Department slug to get categories for.",
            "schema": { "type": "string" }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for in types.",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to return.",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of advert types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAdvertTypesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Query string validation failed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/maincategories": {
      "get": {
        "operationId": "JournalController_mainCategories",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for in main categories.",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to return.",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of main categories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMainCategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Query string validation failed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/categories": {
      "get": {
        "operationId": "JournalController_categories",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for in categories.",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to return.",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of advert categories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Query string validation failed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/institutions": {
      "get": {
        "operationId": "JournalController_institutions",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "String to search for in institutions.",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to return.",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of institutions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstitutionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Query string validation failed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/signatures": {
      "get": {
        "operationId": "JournalController_signatures",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Search for a specific signature by id",
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Search for a specific signature by type",
            "example": "Regular",
            "schema": { "type": "string" }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search for a specific signature",
            "example": "Dagur B. Eggertsson",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to return.",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of signatures",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAdvertSignatureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/journal/error": {
      "get": {
        "operationId": "JournalController_error",
        "parameters": [],
        "responses": {
          "500": {
            "description": "Explicit error from service to test logging."
          }
        }
      }
    },
    "/api/v1/journal/health": {
      "get": {
        "operationId": "JournalController_health",
        "parameters": [],
        "responses": { "200": { "description": "Health check endpoint." } }
      }
    }
  },
  "info": {
    "title": "The Official Journal of Iceland Admin API",
    "description": "Admin api for the Official Journal of Iceland. This API is used to manage the content of the Official Journal of Iceland.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "ApplicationRequirements": {
        "type": "object",
        "properties": {
          "approveExternalData": {
            "type": "string",
            "enum": ["yes", "no"],
            "example": "yes",
            "description": "Has the applicant approved the requirements"
          }
        },
        "required": ["approveExternalData"]
      },
      "ApplicationAdvert": {
        "type": "object",
        "properties": {
          "department": {
            "type": "string",
            "example": "b783c4d5-6e78-9f01-2g34-h56i7j8k9l0m",
            "description": "Id of the selected department for the application advert"
          },
          "type": {
            "type": "string",
            "example": "a71ka2b3-4c56-7d89-0e12-3f45g6h7i8j9",
            "description": "Id of the selected type for the application advert"
          },
          "title": {
            "type": "string",
            "example": "GJALDSKRÁ fyrir hundahald í Reykjavík",
            "description": "Title of the application advert"
          },
          "document": {
            "type": "string",
            "description": "HTML string of the application advert"
          },
          "template": {
            "type": "string",
            "description": "Selected template for the application advert"
          },
          "subType": {
            "type": "string",
            "example": "b781ks2-3c45-6d78-9e01-2f34g5h6i7j8",
            "description": "Id of the selected subType for the application advert, only when type is \"Reglugerð\""
          }
        },
        "required": [
          "department",
          "type",
          "title",
          "document",
          "template",
          "subType"
        ]
      },
      "ApplicationSignatureMember": {
        "type": "object",
        "properties": {
          "above": {
            "type": "string",
            "example": "F.h.r",
            "description": "Text above the name of the signature"
          },
          "name": {
            "type": "string",
            "example": "Jón Jónsson",
            "description": "Name of the signature"
          },
          "after": {
            "type": "string",
            "example": "ráðherra",
            "description": "Text after the name of the signature"
          },
          "below": {
            "type": "string",
            "example": "Text below the name of the signature",
            "description": "borgarstjóri"
          }
        },
        "required": ["above", "name", "after", "below"]
      },
      "ApplicationRegularSignature": {
        "type": "object",
        "properties": {
          "institution": {
            "type": "string",
            "example": "Dómsmálaráðuneytið",
            "description": "Institution/place of the signature"
          },
          "date": {
            "type": "string",
            "example": "2021-04-01T00:00:00.000Z",
            "description": "Date of the signature"
          },
          "members": {
            "description": "Member of the signature",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationSignatureMember"
            }
          }
        },
        "required": ["institution", "date", "members"]
      },
      "ApplicationCommitteeSignature": {
        "type": "object",
        "properties": {
          "institution": {
            "type": "string",
            "example": "Dómsmálaráðuneytið",
            "description": "Institution/place of the signature"
          },
          "date": {
            "type": "string",
            "example": "2021-04-01T00:00:00.000Z",
            "description": "Date of the signature"
          },
          "members": {
            "description": "Member of the signature",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationSignatureMember"
            }
          }
        },
        "required": ["institution", "date", "members"]
      },
      "ApplicationSignature": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "committee",
            "description": "Signature type of the application"
          },
          "signature": {
            "type": "string",
            "example": "<p>Jón Jónsson</p>",
            "description": "HTML string of the signature"
          },
          "additional": {
            "type": "string",
            "example": "Dagur B. Eggertsson",
            "description": "Additional name of the signature"
          },
          "regular": {
            "description": "Regular signature of the application",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRegularSignature"
            }
          },
          "committee": {
            "description": "Committee signature of the application",
            "allOf": [
              { "$ref": "#/components/schemas/ApplicationCommitteeSignature" }
            ]
          }
        },
        "required": ["type", "signature", "additional", "regular", "committee"]
      },
      "ApplicationAttachmentsFileSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "filename.doc",
            "description": "Name of the attachment"
          },
          "key": {
            "type": "string",
            "example": "key",
            "description": "Key of the attachment"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/document.pdf",
            "description": "URL of the attachment"
          }
        },
        "required": ["name", "key", "url"]
      },
      "ApplicationAttachments": {
        "type": "object",
        "properties": {
          "files": {
            "description": "List of attachments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationAttachmentsFileSchema"
            }
          },
          "fileNames": {
            "type": "string",
            "example": "document",
            "description": "Selected department for the application attachment, should be \"document\" or \"additions\""
          }
        },
        "required": ["files", "fileNames"]
      },
      "ApplicationContentCategories": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "example": "Gæludýr",
            "description": "Label of the category"
          },
          "value": {
            "type": "string",
            "example": "b619j2k3-4l56-7m89-0n12-3o45p6q7r8s9",
            "description": "Id of the selected category"
          }
        },
        "required": ["label", "value"]
      },
      "ApplicationCommunicationChannels": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email",
            "description": "Selected communication channel"
          },
          "phone": {
            "type": "string",
            "example": "5555555",
            "description": "Phone number of the communication channel"
          }
        },
        "required": ["email", "phone"]
      },
      "ApplicationPublishing": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "example": "2021-04-01T00:00:00.000Z",
            "description": "Requested publishing date"
          },
          "fastTrack": {
            "type": "string",
            "enum": ["yes", "no"],
            "example": "yes",
            "description": "Request fast track for the advert"
          },
          "contentCategories": {
            "description": "List of selected categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationContentCategories"
            }
          },
          "communicationChannels": {
            "description": "Selected communication channels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCommunicationChannels"
            }
          },
          "message": {
            "type": "string",
            "example": "Some message..",
            "description": "Message for the publisher"
          }
        },
        "required": [
          "date",
          "fastTrack",
          "contentCategories",
          "communicationChannels",
          "message"
        ]
      },
      "ApplicationComment": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "example": "Reykjavíkurborg",
            "description": "Comment of the application"
          },
          "task": {
            "type": "string",
            "example": "gerir athugasemd",
            "description": "Describes which kind of comment is it"
          },
          "comment": {
            "type": "string",
            "example": "Ég hef samband við lögræðing",
            "description": "The comment itself"
          },
          "date": {
            "type": "string",
            "example": "2021-04-01T00:00:00.000Z",
            "description": "Date of the comment"
          },
          "name": {
            "type": "string",
            "example": "Jón Jónsson",
            "description": "Name of the comment author"
          }
        },
        "required": ["from", "task", "comment", "date", "name"]
      },
      "ApplicationCommentSchema": {
        "type": "object",
        "properties": {
          "lastUpdated": {
            "type": "string",
            "example": "12-12-2021",
            "description": "Last updated date of the comment"
          },
          "comments": {
            "description": "List of comments",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApplicationComment" }
          }
        },
        "required": ["lastUpdated", "comments"]
      },
      "ApplicationAnswers": {
        "type": "object",
        "properties": {
          "requirements": {
            "example": "true",
            "description": "Has the applicant approved the external data",
            "allOf": [
              { "$ref": "#/components/schemas/ApplicationRequirements" }
            ]
          },
          "advert": {
            "description": "Application advert",
            "allOf": [{ "$ref": "#/components/schemas/ApplicationAdvert" }]
          },
          "signature": {
            "description": "Application signature",
            "allOf": [{ "$ref": "#/components/schemas/ApplicationSignature" }]
          },
          "attachments": {
            "description": "Application attachments",
            "allOf": [{ "$ref": "#/components/schemas/ApplicationAttachments" }]
          },
          "publishing": {
            "description": "Application publishing",
            "allOf": [{ "$ref": "#/components/schemas/ApplicationPublishing" }]
          },
          "comments": {
            "description": "Application comments",
            "allOf": [
              { "$ref": "#/components/schemas/ApplicationCommentSchema" }
            ]
          }
        },
        "required": [
          "requirements",
          "advert",
          "signature",
          "attachments",
          "publishing",
          "comments"
        ]
      },
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "a12c3d4e-5f67-8h90-1i23-j45k6l7m8n9o0",
            "description": "Guid of the application"
          },
          "applicant": {
            "type": "string",
            "example": "0101015050",
            "description": "National id of the applicant"
          },
          "assignees": {
            "example": ["0101015050"],
            "description": "List of assignees",
            "type": "array",
            "items": { "type": "string" }
          },
          "state": {
            "type": "string",
            "example": "draft",
            "description": "State of the application"
          },
          "status": {
            "type": "string",
            "example": "inprogress",
            "description": "Status of the application"
          },
          "typeId": {
            "type": "string",
            "example": "OfficialJournalOfIceland",
            "description": "Type of the application"
          },
          "created": {
            "type": "string",
            "example": "2021-04-01T00:00:00.000Z",
            "description": "Application creation date"
          },
          "modified": {
            "type": "string",
            "example": "2021-04-01T00:00:00.000Z",
            "description": "Application last modified date"
          },
          "name": {
            "type": "string",
            "example": "Stjórnartíðindi",
            "description": "Name of the application"
          },
          "answers": {
            "description": "Application answers",
            "allOf": [{ "$ref": "#/components/schemas/ApplicationAnswers" }]
          },
          "externalData": { "type": "object" },
          "listed": {
            "type": "boolean",
            "example": true,
            "description": "Is the application listed"
          },
          "prunedAt": {
            "type": "string",
            "example": "2021-04-01T00:00:00.000Z",
            "description": "Prune date of the application"
          },
          "pruned": {
            "type": "boolean",
            "example": "2021-04-01T00:00:00.000Z",
            "description": "Date of the application"
          }
        },
        "required": [
          "id",
          "applicant",
          "assignees",
          "state",
          "status",
          "typeId",
          "created",
          "modified",
          "name",
          "answers",
          "externalData",
          "listed",
          "prunedAt",
          "pruned"
        ]
      },
      "SubmitApplicationBody": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "enum": ["REJECT", "APPROVE"],
            "example": "APPROVE",
            "description": "Approve or reject the application."
          },
          "answers": {
            "example": {},
            "description": "Answers to the application questions.",
            "allOf": [{ "$ref": "#/components/schemas/ApplicationAnswers" }]
          }
        },
        "required": ["event", "answers"]
      },
      "UpdateApplicationBody": {
        "type": "object",
        "properties": {
          "answers": {
            "example": {},
            "description": "Answers to the application questions.",
            "allOf": [{ "$ref": "#/components/schemas/ApplicationAnswers" }]
          }
        },
        "required": ["answers"]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the user, GUID format.",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "First name of the user.",
            "example": "Jón Gunnar"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user.",
            "example": "Jónsson"
          },
          "active": {
            "type": "string",
            "description": "Status of the user",
            "example": true
          }
        },
        "required": ["id", "name", "lastName", "active"]
      },
      "Department": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the advert department, GUID format.",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "Title of the advert department.",
            "example": "A deild"
          },
          "slug": {
            "type": "string",
            "description": "Slug of the advert department, used in URLs and API requests.",
            "example": "a-deild"
          }
        },
        "required": ["id", "title", "slug"]
      },
      "AdvertType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the advert type, GUID format.",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "Title of the advert type, always uppercased.",
            "example": "AUGLÝSING"
          },
          "slug": {
            "type": "string",
            "description": "Slug of the advert type, used in URLs and API requests.",
            "example": "auglysing"
          },
          "department": {
            "description": "Department the advert type belongs to.",
            "nullable": false,
            "allOf": [{ "$ref": "#/components/schemas/Department" }]
          }
        },
        "required": ["id", "title", "slug", "department"]
      },
      "AdvertPublicationNumber": {
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "description": "Serial number of the publication number.",
            "example": "1"
          },
          "year": {
            "type": "number",
            "description": "Year of the publication number.",
            "example": "2024"
          },
          "full": {
            "type": "string",
            "description": "Full publication number, with both `number` and `year` separated with `/`.",
            "example": "1/2024"
          }
        },
        "required": ["number", "year", "full"]
      },
      "MainCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the main category, GUID format.",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "Title of the main category.",
            "example": "Dómstólar og réttarfar"
          },
          "slug": {
            "type": "string",
            "description": "Slug of the main category, used in URLs and API requests.",
            "example": "domstolar-og-rettarfar"
          },
          "description": {
            "type": "string",
            "description": "Description of the main category, used on front page.",
            "example": "Hæstiréttur, lögmenn, lögreglumál, dómsmál og landsdómur."
          }
        },
        "required": ["id", "title", "slug", "description"]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the advert category, GUID format.",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "Title of the advert category.",
            "example": "Evrópska efnahagssvæðið"
          },
          "slug": {
            "type": "string",
            "description": "Slug of the advert category, used in URLs and API requests.",
            "example": "evropska-efnahagssvaedid"
          },
          "department": {
            "description": "The department the category belongs to.",
            "nullable": true,
            "example": "A deild",
            "allOf": [{ "$ref": "#/components/schemas/Department" }]
          },
          "mainCategory": {
            "description": "The main category this category belongs to.",
            "nullable": true,
            "example": "Dómstólar og réttarfar",
            "allOf": [{ "$ref": "#/components/schemas/MainCategory" }]
          }
        },
        "required": ["id", "title", "slug"]
      },
      "Institution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the institution, GUID format.",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "Title of the institution",
            "example": "Dómsmálaráðuneytið"
          },
          "slug": {
            "type": "string",
            "description": "Slug of the institution, used in URLs and API requests.",
            "example": "domsmalaraduneytid"
          }
        },
        "required": ["id", "title", "slug"]
      },
      "AdvertDocument": {
        "type": "object",
        "properties": {
          "isLegacy": {
            "type": "boolean",
            "description": "Is the `html` from the legacy system?",
            "example": "false"
          },
          "html": {
            "type": "string",
            "description": "Full HTML for the advert, either generated by new system or legacy system based on `isLegacy`.",
            "example": "<html string>",
            "nullable": true
          },
          "pdfUrl": {
            "type": "string",
            "description": "URL for the generated PDF file.",
            "example": "<url>",
            "nullable": true
          }
        },
        "required": ["isLegacy", "html"]
      },
      "AdvertSignatureMember": {
        "type": "object",
        "properties": {
          "isChairman": {
            "type": "boolean",
            "description": "Marks the members as chairman or not",
            "example": true,
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Name of the committee chairman",
            "example": "Dagur B. Eggertsson"
          },
          "textAbove": {
            "type": "string",
            "description": "Text above the name of the signature",
            "example": "F.h.r",
            "nullable": true
          },
          "textAfter": {
            "type": "string",
            "description": "Text after the name of the signature",
            "example": "formaður",
            "nullable": true
          },
          "textBelow": {
            "type": "string",
            "description": "Text above the name of the signature",
            "example": "borgarstjóri",
            "nullable": true
          }
        },
        "required": ["isChairman", "name"]
      },
      "AdvertSignatureData": {
        "type": "object",
        "properties": {
          "institution": {
            "type": "string",
            "description": "Institution of the signature",
            "example": "Reykjavíkurborg"
          },
          "date": {
            "type": "string",
            "description": "Date of the signature",
            "example": "2006-10-17 00:00:00.0000",
            "nullable": false
          },
          "members": {
            "description": "Members of the signature",
            "example": true,
            "nullable": false,
            "type": "array",
            "items": { "$ref": "#/components/schemas/AdvertSignatureMember" }
          }
        },
        "required": ["institution", "date", "members"]
      },
      "AdvertSignature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the signature, GUID format.",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": false
          },
          "advertId": {
            "type": "string",
            "description": "Advert ID",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "type": {
            "type": "string",
            "description": "Type of the signature",
            "enum": ["Hefðbundin", "Nefnd"],
            "example": "Hefðbundin"
          },
          "additional": {
            "type": "string",
            "description": "Optional addiational signature",
            "example": "Guðrún Jónsdóttir"
          },
          "data": {
            "description": "Signature data",
            "example": true,
            "nullable": false,
            "type": "array",
            "items": { "$ref": "#/components/schemas/AdvertSignatureData" }
          }
        },
        "required": ["id", "advertId", "type", "data"]
      },
      "AdvertAttachment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "File name for Attachment.",
            "example": "Viðauki.pdf"
          },
          "type": {
            "type": "string",
            "description": "Type Attachment.",
            "example": "addendum"
          },
          "url": {
            "type": "string",
            "description": "URL for Attachment.",
            "example": "<url>"
          }
        },
        "required": ["name", "type", "url"]
      },
      "Advert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the advert, GUID format.",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": false
          },
          "department": {
            "description": "The department the advert is for.",
            "nullable": false,
            "example": "A deild",
            "allOf": [{ "$ref": "#/components/schemas/Department" }]
          },
          "type": {
            "description": "Type of the advert.",
            "example": "GJALDSKRÁ",
            "allOf": [{ "$ref": "#/components/schemas/AdvertType" }]
          },
          "subject": {
            "type": "string",
            "description": "Subject of the advert, always dependant on the `type`.",
            "example": "fyrir hundahald í Reykjavíkurborg."
          },
          "title": {
            "type": "string",
            "description": "Title of the advert with both `type` and `subject`.",
            "example": "GJALDSKRÁ fyrir hundahald í Reykjavíkurborg."
          },
          "status": {
            "type": "string",
            "enum": [
              "Virk",
              "Afturkölluð",
              "Drög",
              "Eldri auglýsing",
              "Hafnað",
              "Í bið",
              "Í vinnslu",
              "Innsend",
              "Tilbúin til útgáfu",
              "Útgefin"
            ],
            "description": "Status of the advert",
            "nullable": false,
            "example": "Virk"
          },
          "publicationNumber": {
            "description": "Publication number of the advert",
            "nullable": true,
            "allOf": [
              { "$ref": "#/components/schemas/AdvertPublicationNumber" }
            ]
          },
          "createdDate": {
            "type": "string",
            "description": "Date the advert was created. ISO 8601 date and time format in UTC.",
            "nullable": false,
            "example": "2024-01-01T09:00:00Z"
          },
          "updatedDate": {
            "type": "string",
            "description": "Date the advert was last updated. ISO 8601 date and time format in UTC.",
            "nullable": false,
            "example": "2024-01-20T09:00:00Z"
          },
          "signatureDate": {
            "type": "string",
            "description": "Date the advert was signed, can be null. ISO 8601 date and time format in UTC.",
            "nullable": true,
            "example": "2024-01-10T16:00:00Z"
          },
          "publicationDate": {
            "type": "string",
            "description": "Date the advert was signed, can be null. ISO 8601 date and time format in UTC.",
            "nullable": true,
            "example": "2024-01-20T09:00:00Z"
          },
          "categories": {
            "description": "List of advert categories.",
            "nullable": false,
            "type": "array",
            "items": { "$ref": "#/components/schemas/Category" }
          },
          "involvedParty": {
            "description": "Involved party for the advert.",
            "nullable": false,
            "allOf": [{ "$ref": "#/components/schemas/Institution" }]
          },
          "document": {
            "description": "Advert document in different formats.",
            "nullable": false,
            "allOf": [{ "$ref": "#/components/schemas/AdvertDocument" }]
          },
          "signature": {
            "description": "Signatures for the advert.",
            "allOf": [{ "$ref": "#/components/schemas/AdvertSignature" }]
          },
          "attachments": {
            "description": "Attachments for the advert.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AdvertAttachment" }
          }
        },
        "required": [
          "id",
          "department",
          "type",
          "title",
          "status",
          "publicationNumber",
          "createdDate",
          "updatedDate",
          "signatureDate",
          "publicationDate",
          "categories",
          "involvedParty",
          "document",
          "signature",
          "attachments"
        ]
      },
      "CaseCommentTask": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "From who or what initied the task, used by client to show who inited the task.",
            "example": "Ármann",
            "nullable": true
          },
          "to": {
            "type": "string",
            "description": "To whom or what the task is assigned to.",
            "example": "Pálina J",
            "nullable": true
          },
          "title": {
            "type": "string",
            "enum": [
              "Innsent af:",
              "merkir sér málið.",
              "færir mál á",
              "færir mál í stöðuna:",
              "gerir athugasemd.",
              "skráir skilaboð"
            ],
            "example": "Innsent af:",
            "description": "Title for the task action"
          },
          "comment": {
            "type": "string",
            "description": "The comment itself",
            "example": "Pálína, getur þú tekið við og staðfest að upplýsingarnar séu réttar?",
            "nullable": true
          }
        },
        "required": ["from", "to", "title", "comment"]
      },
      "CaseComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "description": "Id of the case comment."
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of the comment, ISO 8601 format, UTC time format.",
            "example": "2024-01-01T09:00:00Z"
          },
          "internal": {
            "type": "boolean",
            "description": "Is the comment internal or external.",
            "example": false
          },
          "type": {
            "type": "string",
            "enum": ["submit", "assign", "update", "comment", "message"],
            "example": "comment",
            "description": "Type of the case task."
          },
          "caseStatus": {
            "type": "string",
            "enum": [
              "Innsent",
              "Grunnvinnsla",
              "Yfirlestur",
              "Tilbúið",
              "Útgefið",
              "Tekið úr birtingu",
              "Birtingu hafnað"
            ],
            "example": "Innsent",
            "description": "Status of case when comment was added."
          },
          "task": {
            "example": {
              "from": "Ármann",
              "to": null,
              "title": "gerir athugasemd",
              "comment": "Pálína, getur\n      þú tekið við og staðfest að upplýsingarnar séu réttar?"
            },
            "description": "The task itself",
            "allOf": [{ "$ref": "#/components/schemas/CaseCommentTask" }]
          }
        },
        "required": [
          "id",
          "createdAt",
          "internal",
          "type",
          "caseStatus",
          "task"
        ]
      },
      "Case": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "applicationId": {
            "type": "string",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "description": "Id of the submitted application, default to null on older cases."
          },
          "year": {
            "type": "number",
            "example": 2024,
            "description": "Year the case was created."
          },
          "caseNumber": {
            "type": "number",
            "example": 190,
            "description": "Case number (numeric string) gets generated automatically when a case is created."
          },
          "status": {
            "type": "string",
            "enum": [
              "Innsent",
              "Grunnvinnsla",
              "Yfirlestur",
              "Tilbúið",
              "Útgefið",
              "Tekið úr birtingu",
              "Birtingu hafnað"
            ],
            "example": "Innsent",
            "description": "Status of the case, default to \"Innsent\""
          },
          "tag": {
            "type": "string",
            "enum": ["Ekki hafið", "Í yfirlestri", "Samlesin", "Þarf skoðun"],
            "example": "Ekki hafið",
            "description": "Internal tag for the case, default to null"
          },
          "createdAt": {
            "type": "string",
            "example": "2024-01-01T09:00:00Z",
            "description": "Date the case was created. ISO 8601 date and time format in UTC."
          },
          "modifiedAt": {
            "type": "string",
            "example": "2024-01-01T09:00:00Z",
            "description": "Date when the case was last updated. ISO 8601 date and time format in UTC."
          },
          "assignedTo": {
            "description": "User the case is assigned to.",
            "allOf": [{ "$ref": "#/components/schemas/User" }]
          },
          "advert": {
            "description": "The advert that is associated with the case.",
            "allOf": [{ "$ref": "#/components/schemas/Advert" }]
          },
          "fastTrack": {
            "type": "boolean",
            "example": false,
            "description": "Requested fast track"
          },
          "published": {
            "type": "boolean",
            "example": false,
            "description": "Is the case published."
          },
          "publishedAt": {
            "type": "string",
            "example": "2024-01-01T09:00:00Z",
            "description": "Date the case was published. ISO 8601 date and time format in UTC."
          },
          "price": {
            "type": "number",
            "example": 23000,
            "description": "The cost of the case."
          },
          "paid": {
            "type": "boolean",
            "example": false,
            "description": "Is the case paid for."
          },
          "comments": {
            "description": "Comments on the case.",
            "example": {
              "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
              "createdAt": "2024-01-01T09:00:00Z",
              "type": "Comment",
              "task": {
                "from": "Ármann",
                "to": null,
                "title": "gerir athugasemd",
                "comment": "Pálína, getur þú tekið við og staðfest að upplýsingarnar séu réttar?"
              }
            },
            "type": "array",
            "items": { "$ref": "#/components/schemas/CaseComment" }
          }
        },
        "required": [
          "id",
          "applicationId",
          "year",
          "caseNumber",
          "status",
          "tag",
          "createdAt",
          "modifiedAt",
          "assignedTo",
          "advert",
          "fastTrack",
          "published",
          "publishedAt",
          "price",
          "paid",
          "comments"
        ]
      },
      "Paging": {
        "type": "object",
        "properties": {
          "page": { "type": "number", "example": 1 },
          "totalPages": { "type": "number", "example": 10 },
          "totalItems": { "type": "number", "example": 1000 },
          "nextPage": { "type": "number", "example": 2, "nullable": true },
          "previousPage": { "type": "number", "example": 1, "nullable": true },
          "pageSize": {
            "type": "number",
            "example": 10,
            "minimum": 1,
            "maximum": 100
          },
          "hasNextPage": { "type": "boolean", "example": true },
          "hasPreviousPage": { "type": "boolean", "example": false }
        },
        "required": [
          "page",
          "totalPages",
          "totalItems",
          "nextPage",
          "previousPage",
          "pageSize",
          "hasNextPage",
          "hasPreviousPage"
        ]
      },
      "GetCasesReponse": {
        "type": "object",
        "properties": {
          "cases": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Case" }
          },
          "paging": {
            "description": "Paging info",
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["cases", "paging"]
      },
      "GetUsersResponse": {
        "type": "object",
        "properties": {
          "users": {
            "description": "List of all active users",
            "type": "array",
            "items": { "$ref": "#/components/schemas/User" }
          }
        },
        "required": ["users"]
      },
      "CaseOverviewTotalItems": {
        "type": "object",
        "properties": {
          "submitted": {
            "type": "number",
            "description": "Total submitted cases",
            "example": 7
          },
          "inProgress": {
            "type": "number",
            "description": "Total in progress cases",
            "example": 3
          },
          "inReview": {
            "type": "number",
            "description": "Total in review cases",
            "example": 2
          },
          "ready": {
            "type": "number",
            "description": "Total ready cases",
            "example": 1
          }
        },
        "required": ["submitted", "inProgress", "inReview", "ready"]
      },
      "CaseEditorialOverview": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Cases for selected tab",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Case" }
          },
          "totalItems": {
            "description": "Total cases for each status",
            "allOf": [{ "$ref": "#/components/schemas/CaseOverviewTotalItems" }]
          },
          "paging": {
            "description": "Paging information",
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["data", "totalItems", "paging"]
      },
      "PostCasePublishBody": {
        "type": "object",
        "properties": {
          "caseIds": {
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "description": "Id of the case to publish.",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["caseIds"]
      },
      "PostCaseComment": {
        "type": "object",
        "properties": {
          "internal": {
            "type": "boolean",
            "description": "Is the comment internal"
          },
          "type": {
            "type": "string",
            "enum": ["submit", "assign", "update", "comment", "message"],
            "description": "Type of the comment"
          },
          "comment": {
            "type": "string",
            "description": "The case comment itself"
          },
          "from": { "type": "string", "description": "The task itself" },
          "to": {
            "type": "string",
            "description": "To whom or what the task is assigned to."
          }
        },
        "required": ["internal", "type", "comment", "from"]
      },
      "StatisticsDepartmentItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Department name",
            "example": "Department of Justice"
          },
          "count": {
            "type": "number",
            "description": "Number of adverts",
            "example": 10
          },
          "percentage": {
            "type": "number",
            "description": "Percentage of total",
            "example": 10
          }
        },
        "required": ["name", "count", "percentage"]
      },
      "GetStatisticsDepartmentResponse": {
        "type": "object",
        "properties": {
          "submitted": {
            "$ref": "#/components/schemas/StatisticsDepartmentItem"
          },
          "inProgress": {
            "$ref": "#/components/schemas/StatisticsDepartmentItem"
          },
          "inReview": {
            "$ref": "#/components/schemas/StatisticsDepartmentItem"
          },
          "ready": { "$ref": "#/components/schemas/StatisticsDepartmentItem" },
          "totalAdverts": {
            "type": "number",
            "description": "Total number of adverts",
            "example": 100
          },
          "totalPercentage": {
            "type": "number",
            "description": "Total number of departments",
            "example": 10
          }
        },
        "required": [
          "submitted",
          "inProgress",
          "inReview",
          "ready",
          "totalAdverts",
          "totalPercentage"
        ]
      },
      "StatisticsOverviewCategory": {
        "type": "object",
        "properties": {
          "totalAdverts": { "type": "number" },
          "text": { "type": "string" }
        },
        "required": ["totalAdverts", "text"]
      },
      "GetStatisticsOverviewResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsOverviewCategory"
            }
          },
          "totalAdverts": { "type": "number" }
        },
        "required": ["categories", "totalAdverts"]
      },
      "AdvertNotFound": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "HTTP status code of response"
          },
          "message": { "type": "string", "description": "Response message" }
        },
        "required": ["statusCode", "message"]
      },
      "GetAdvertsResponse": {
        "type": "object",
        "properties": {
          "adverts": {
            "description": "List of adverts",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Advert" }
          },
          "paging": {
            "description": "Paging info",
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["adverts", "paging"]
      },
      "ValidationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Array of error messages",
            "example": [
              "message must be shorter than or equal to 10 characters"
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Bad Request"
          },
          "statusCode": {
            "type": "number",
            "description": "HTTP status code of response",
            "example": 400
          }
        },
        "required": ["message", "statusCode"]
      },
      "GetDepartmentsResponse": {
        "type": "object",
        "properties": {
          "departments": {
            "description": "List of departments",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Department" }
          },
          "paging": {
            "description": "Paging info",
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["departments", "paging"]
      },
      "GetAdvertTypesResponse": {
        "type": "object",
        "properties": {
          "types": {
            "description": "List of advert types",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AdvertType" }
          },
          "paging": {
            "description": "Paging info",
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["types", "paging"]
      },
      "GetMainCategoriesResponse": {
        "type": "object",
        "properties": {
          "mainCategories": {
            "description": "List of main categories",
            "type": "array",
            "items": { "$ref": "#/components/schemas/MainCategory" }
          },
          "paging": {
            "description": "Paging info",
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["mainCategories", "paging"]
      },
      "GetCategoriesResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "description": "List of advert categories",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Category" }
          },
          "paging": {
            "description": "Paging info",
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["categories", "paging"]
      },
      "GetInstitutionsResponse": {
        "type": "object",
        "properties": {
          "institutions": {
            "description": "List of involved parties",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Institution" }
          },
          "paging": {
            "description": "Paging info",
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["institutions", "paging"]
      },
      "GetAdvertSignatureResponse": {
        "type": "object",
        "properties": {
          "items": {
            "description": "List of signatures",
            "nullable": false,
            "type": "array",
            "items": { "$ref": "#/components/schemas/AdvertSignature" }
          },
          "paging": {
            "description": "Paging information",
            "nullable": false,
            "allOf": [{ "$ref": "#/components/schemas/Paging" }]
          }
        },
        "required": ["items", "paging"]
      }
    }
  }
}
