'use strict'

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface) {
    return await queryInterface.sequelize.query(`
    BEGIN;

    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

    CREATE TABLE IF NOT EXISTS USER_ROLE (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADMIN_USER (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      NATIONAL_ID VARCHAR NOT NULL,
      FIRST_NAME VARCHAR NOT NULL,
      LAST_NAME VARCHAR NOT NULL,
      DISPLAY_NAME VARCHAR NOT NULL,
      EMAIL VARCHAR NOT NULL,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADMIN_USER_ROLES (
      USER_ROLE_ID UUID NOT NULL,
      ADMIN_USER_ID UUID NOT NULL,
      PRIMARY KEY (USER_ROLE_ID, ADMIN_USER_ID),
      CONSTRAINT FK_ADMIN_USER_ROLE_USER_ROLE_ID FOREIGN KEY (USER_ROLE_ID) REFERENCES USER_ROLE (ID),
      CONSTRAINT FK_ADMIN_USER_ROLE_ADMIN_USER_ID FOREIGN KEY (ADMIN_USER_ID) REFERENCES ADMIN_USER (ID)
    );

    -- "Deildir og tegundir"
    CREATE TABLE IF NOT EXISTS ADVERT_DEPARTMENT (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL UNIQUE,
      SLUG VARCHAR NOT NULL UNIQUE,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT_MAIN_TYPE (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL UNIQUE,
      DEPARTMENT_ID UUID NOT NULL,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      CONSTRAINT FK_ADVERT_MAIN_TYPE_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID) REFERENCES ADVERT_DEPARTMENT (ID),
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT_TYPE (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL UNIQUE,
      DEPARTMENT_ID UUID NOT NULL,
      MAIN_TYPE_ID UUID,
      LEGACY_ID UUID,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      CONSTRAINT SLUG_UNIQUE UNIQUE (SLUG),
      CONSTRAINT FK_ADVERT_TYPE_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID) REFERENCES ADVERT_DEPARTMENT (ID),
      CONSTRAINT FK_ADVERT_TYPE_MAIN_TYPE_ID FOREIGN KEY (MAIN_TYPE_ID) REFERENCES ADVERT_MAIN_TYPE (ID),
      PRIMARY KEY (ID)
    );

    -- "Yfirflokkur"
    CREATE TABLE IF NOT EXISTS ADVERT_MAIN_CATEGORY (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      DESCRIPTION VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT_CATEGORY (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      PRIMARY KEY (ID)
    );

    -- "Main category" to "Category" relation
    CREATE TABLE IF NOT EXISTS CATEGORY_CATEGORIES (
      ADVERT_CATEGORY_ID UUID NOT NULL,
      ADVERT_MAIN_CATEGORY_ID UUID NOT NULL,
      PRIMARY KEY (ADVERT_CATEGORY_ID, ADVERT_MAIN_CATEGORY_ID),
      CONSTRAINT FK_CATEGORIES_ADVERT_CATEGORY_ID FOREIGN KEY (ADVERT_CATEGORY_ID) REFERENCES ADVERT_CATEGORY (ID),
      CONSTRAINT FK_CATEGORIES_ADVERT_MAIN_CATEGORY_ID FOREIGN KEY (ADVERT_MAIN_CATEGORY_ID) REFERENCES ADVERT_MAIN_CATEGORY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT_STATUS (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT_INVOLVED_PARTY (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      CONSTRAINT ADVERT_INVOLVED_PARTY_TITLE_SLUG_UNIQUE UNIQUE (TITLE, SLUG),
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      DEPARTMENT_ID UUID NOT NULL,
      TYPE_ID UUID NOT NULL,
      SUBJECT VARCHAR NOT NULL,
      STATUS_ID UUID NOT NULL,
      SERIAL_NUMBER INTEGER NOT NULL CHECK (SERIAL_NUMBER > 0),
      PUBLICATION_YEAR INTEGER NOT NULL CHECK (
        PUBLICATION_YEAR > 1900
        AND PUBLICATION_YEAR < 2100
      ),
      SIGNATURE_DATE TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      PUBLICATION_DATE TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      INVOLVED_PARTY_ID UUID NOT NULL,
      IS_LEGACY BOOLEAN DEFAULT FALSE,
      DOCUMENT_HTML TEXT NOT NULL,
      DOCUMENT_PDF_URL VARCHAR,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      PRIMARY KEY (ID),
      CONSTRAINT FK_ADVERT_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID) REFERENCES ADVERT_DEPARTMENT (ID),
      CONSTRAINT FK_ADVERT_TYPE_ID FOREIGN KEY (TYPE_ID) REFERENCES ADVERT_TYPE (ID),
      CONSTRAINT FK_ADVERT_STATUS_ID FOREIGN KEY (STATUS_ID) REFERENCES ADVERT_STATUS (ID),
      CONSTRAINT FK_ADVERT_INVOLVED_PARTY_ID FOREIGN KEY (INVOLVED_PARTY_ID) REFERENCES ADVERT_INVOLVED_PARTY (ID),
      CONSTRAINT ADVERT_SERIAL_NUMBER_PUBLICATION_YEAR_DEPARTMENT_UNIQUE UNIQUE (SERIAL_NUMBER, PUBLICATION_YEAR, DEPARTMENT_ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT_CORRECTION (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      ADVERT_ID UUID NOT NULL,
      TITLE VARCHAR NOT NULL,Â°
      DESCRIPTION VARCHAR NOT NULL,
      DOCUMENT_HTML TEXT NOT NULL,
      DOCUMENT_PDF_URL VARCHAR,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      PRIMARY KEY (ID),
      CONSTRAINT FK_ADVERT_CORRECTION_ADVERT_ID FOREIGN KEY (ADVERT_ID) REFERENCES ADVERT (ID) ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS ADVERT_CATEGORIES (
      ADVERT_ID UUID NOT NULL,
      CATEGORY_ID UUID NOT NULL,
      PRIMARY KEY (ADVERT_ID, CATEGORY_ID),
      CONSTRAINT FK_ADVERT_CATEGORIES_ADVERT_ID FOREIGN KEY (ADVERT_ID) REFERENCES ADVERT (ID),
      CONSTRAINT FK_ADVERT_CATEGORIES_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES ADVERT_CATEGORY (ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT_ATTACHMENTS (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      ADVERT_ID UUID NOT NULL,
      NAME VARCHAR NOT NULL,
      TYPE VARCHAR NOT NULL,
      URL VARCHAR NOT NULL,
      PRIMARY KEY (ID),
      CONSTRAINT FK_ADVERT_ATTACHMENTS FOREIGN KEY (ADVERT_ID) REFERENCES ADVERT (ID)
    );

    CREATE TABLE IF NOT EXISTS CATEGORY_DEPARTMENT (
      CATEGORY_ID UUID NOT NULL,
      DEPARTMENT_ID UUID NOT NULL,
      PRIMARY KEY (CATEGORY_ID, DEPARTMENT_ID),
      CONSTRAINT FK_CATEGORY_DEPARTMENT_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES ADVERT_CATEGORY (ID),
      CONSTRAINT FK_CATEGORY_DEPARTMENT_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID) REFERENCES ADVERT_DEPARTMENT (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_STATUS (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_TAG (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_COMMUNICATION_STATUS (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_COMMENT_TYPE (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_CHANNEL (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      EMAIL VARCHAR NOT NULL,
      PHONE VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_CASE (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      ADVERT_ID UUID,
      APPLICATION_ID UUID,
      YEAR INTEGER NOT NULL,
      CASE_NUMBER VARCHAR NOT NULL,
      STATUS_ID UUID NOT NULL,
      TAG_ID UUID,
      INVOLVED_PARTY_ID UUID,
      CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      IS_LEGACY BOOLEAN NOT NULL DEFAULT FALSE,
      ASSIGNED_USER_ID UUID,
      CASE_COMMUNICATION_STATUS_ID UUID,
      PUBLISHED_AT TIMESTAMP WITH TIME ZONE,
      PRICE INTEGER,
      PAID BOOLEAN DEFAULT FALSE,
      FAST_TRACK BOOLEAN DEFAULT FALSE,
      DEPARTMENT_ID UUID NOT NULL,
      ADVERT_TITLE VARCHAR NOT NULL,
      MESSAGE TEXT,
      ADVERT_REQUESTED_PUBLICATION_DATE TIMESTAMP WITH TIME ZONE,
      ADVERT_TYPE_ID UUID NOT NULL,
      ADVERT_HTML TEXT NOT NULL,
      PUBLICATION_NUMBER VARCHAR,
      CONSTRAINT FK_CASE_CASE_STATUS_ID FOREIGN KEY (STATUS_ID) REFERENCES CASE_STATUS (ID),
      CONSTRAINT FK_CASE_CASE_TAG_ID FOREIGN KEY (TAG_ID) REFERENCES CASE_TAG (ID),
      CONSTRAINT FK_CASE_CASE_INVOLVED_PARTY_ID FOREIGN KEY (INVOLVED_PARTY_ID) REFERENCES ADVERT_INVOLVED_PARTY (ID),
      CONSTRAINT FK_CASE_CASE_COMMUNICATION_STATUS_ID FOREIGN KEY (CASE_COMMUNICATION_STATUS_ID) REFERENCES CASE_COMMUNICATION_STATUS (ID),
      CONSTRAINT FK_CASE_CASE_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID) REFERENCES ADVERT_DEPARTMENT (ID),
      CONSTRAINT FK_CASE_CASE_ADVERT_TYPE_ID FOREIGN KEY (ADVERT_TYPE_ID) REFERENCES ADVERT_TYPE (ID),
      CONSTRAINT FK_CASE_CASE_ADVERT_ID FOREIGN KEY (ADVERT_ID) REFERENCES ADVERT (ID),
      CONSTRAINT FK_CASE_CASE_ASSIGNED_USER_ID FOREIGN KEY (ASSIGNED_USER_ID) REFERENCES ADMIN_USER (ID),
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_COMMENT (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      CASE_ID UUID NOT NULL,
      CASE_STATUS_ID UUID NOT NULL,
      TYPE_ID UUID NOT NULL,
      SOURCE VARCHAR NOT NULL,
      INTERNAL BOOLEAN DEFAULT TRUE,
      APPLICATION_STATE JSONB,
      CREATOR TEXT,
      RECEIVER TEXT,
      COMMENT TEXT,
      PRIMARY KEY (ID),
      CONSTRAINT FK_CASE_COMMENT_CASE_ID FOREIGN KEY (CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_CASE_COMMENT_CASE_STATUS_ID FOREIGN KEY (CASE_STATUS_ID) REFERENCES CASE_STATUS (ID),
      CONSTRAINT FK_CASE_COMMENT_TYPE_ID FOREIGN KEY (TYPE_ID) REFERENCES CASE_COMMENT_TYPE (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_CATEGORIES (
      CASE_CASE_ID UUID NOT NULL,
      CATEGORY_ID UUID NOT NULL,
      PRIMARY KEY (CASE_CASE_ID, CATEGORY_ID),
      CONSTRAINT FK_CASE_CATEGORIES_CASE_ID FOREIGN KEY (CASE_CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_CASE_CATEGORIES_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES ADVERT_CATEGORY (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_CHANNELS (
      CASE_CASE_ID UUID NOT NULL,
      CASE_CHANNEL_ID UUID NOT NULL,
      PRIMARY KEY (CASE_CASE_ID, CASE_CHANNEL_ID),
      CONSTRAINT FK_CASE_CHANNELS_CASE_ID FOREIGN KEY (CASE_CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_CASE_CHANNELS_CHANNEL_ID FOREIGN KEY (CASE_CHANNEL_ID) REFERENCES CASE_CHANNEL (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_COMMENTS (
      CASE_CASE_ID UUID NOT NULL,
      CASE_COMMENT_ID UUID NOT NULL,
      PRIMARY KEY (CASE_CASE_ID, CASE_COMMENT_ID),
      CONSTRAINT FK_CASE_COMMENTS_CASE_ID FOREIGN KEY (CASE_CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_CASE_COMMENTS_COMMENT_ID FOREIGN KEY (CASE_COMMENT_ID) REFERENCES CASE_COMMENT (ID)
    );

    CREATE TABLE IF NOT EXISTS SIGNATURE_TYPE (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS SIGNATURE_MEMBER (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TEXT_ABOVE VARCHAR,
      TEXT_BEFORE VARCHAR,
      TEXT_BELOW VARCHAR,
      TEXT_AFTER VARCHAR,
      VALUE VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS SIGNATURE (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TYPE_ID UUID NOT NULL,
      DATE TIMESTAMP WITH TIME ZONE NOT NULL,
      INSTITUTION VARCHAR NOT NULL,
      INVOLVED_PARTY_ID UUID NOT NULL,
      CHAIRMAN_ID UUID,
      ADDITIONAL_SIGNATURE VARCHAR,
      HTML TEXT NOT NULL,
      PRIMARY KEY (ID),
      CONSTRAINT FK_SIGNATURE_TYPE_ID FOREIGN KEY (TYPE_ID) REFERENCES SIGNATURE_TYPE (ID),
      CONSTRAINT FK_SIGNATURE_INVOLVED_PARTY_ID FOREIGN KEY (INVOLVED_PARTY_ID) REFERENCES ADVERT_INVOLVED_PARTY (ID),
      CONSTRAINT FK_SIGNATURE_CHAIRMAN_ID FOREIGN KEY (CHAIRMAN_ID) REFERENCES SIGNATURE_MEMBER (ID)
    );

    CREATE TABLE IF NOT EXISTS SIGNATURE_MEMBERS (
      SIGNATURE_ID UUID NOT NULL,
      SIGNATURE_MEMBER_ID UUID NOT NULL,
      PRIMARY KEY (SIGNATURE_ID, SIGNATURE_MEMBER_ID),
      CONSTRAINT FK_SIGNATURE_MEMBERS_SIGNATURE_ID FOREIGN KEY (SIGNATURE_ID) REFERENCES SIGNATURE (ID),
      CONSTRAINT FK_SIGNATURE_MEMBERS_MEMBER_ID FOREIGN KEY (SIGNATURE_MEMBER_ID) REFERENCES SIGNATURE_MEMBER (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_SIGNATURES (
      CASE_CASE_ID UUID NOT NULL,
      SIGNATURE_ID UUID NOT NULL,
      PRIMARY KEY (CASE_CASE_ID, SIGNATURE_ID),
      CONSTRAINT FK_CASE_SIGNATURES_CASE_ID FOREIGN KEY (CASE_CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_CASE_SIGNATURES_SIGNATURE_ID FOREIGN KEY (SIGNATURE_ID) REFERENCES SIGNATURE (ID)
    );

    CREATE TABLE IF NOT EXISTS ADVERT_SIGNATURES (
      ADVERT_ID UUID NOT NULL,
      SIGNATURE_ID UUID NOT NULL,
      PRIMARY KEY (ADVERT_ID, SIGNATURE_ID),
      CONSTRAINT FK_ADVERT_SIGNATURES_ADVERT_ID FOREIGN KEY (ADVERT_ID) REFERENCES ADVERT (ID),
      CONSTRAINT FK_ADVERT_SIGNATURES_SIGNATURE_ID FOREIGN KEY (SIGNATURE_ID) REFERENCES SIGNATURE (ID)
    );

    CREATE TABLE IF NOT EXISTS APPLICATION_ATTACHMENT_TYPE (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS APPLICATION_ATTACHMENT (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      APPLICATION_ID UUID NOT NULL,
      ORIGINAL_FILE_NAME VARCHAR NOT NULL,
      FILE_NAME VARCHAR NOT NULL,
      FILE_FORMAT VARCHAR NOT NULL,
      FILE_EXTENSION VARCHAR NOT NULL,
      FILE_SIZE INTEGER NOT NULL,
      FILE_LOCATION VARCHAR NOT NULL,
      TYPE_ID UUID NOT NULL,
      DELETED BOOLEAN DEFAULT FALSE,
      PRIMARY KEY (ID),
      CONSTRAINT FK_APPLICATION_ATTACHMENT_TYPE_ID FOREIGN KEY (TYPE_ID) REFERENCES APPLICATION_ATTACHMENT_TYPE (ID)
    );

    CREATE TABLE IF NOT EXISTS APPLICATION_ATTACHMENTS (
      APPLICATION_ID UUID NOT NULL,
      ATTACHMENT_ID UUID NOT NULL,
      PRIMARY KEY (APPLICATION_ID, ATTACHMENT_ID),
      CONSTRAINT FK_APPLICATION_ATTACHMENTS_APPLICATION_ID FOREIGN KEY (ATTACHMENT_ID) REFERENCES APPLICATION_ATTACHMENT (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_ATTACHMENTS (
      CASE_CASE_ID UUID NOT NULL,
      ATTACHMENT_ID UUID NOT NULL,
      PRIMARY KEY (CASE_CASE_ID, ATTACHMENT_ID),
      CONSTRAINT FK_CASE_ATTACHMENTS_CASE_ID FOREIGN KEY (CASE_CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_CASE_ATTACHMENTS_ATTACHMENT_ID FOREIGN KEY (ATTACHMENT_ID) REFERENCES APPLICATION_ATTACHMENT (ID)
    );

    CREATE TABLE IF NOT EXISTS APPLICATION_USER (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      NATIONAL_ID VARCHAR NOT NULL,
      FIRST_NAME VARCHAR NOT NULL,
      LAST_NAME VARCHAR NOT NULL,
      EMAIL VARCHAR NOT NULL,
      CREATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UPDATED TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      CONSTRAINT APPLICATION_USER_NATIONAL_ID_UNIQUE UNIQUE (NATIONAL_ID),
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS APPLICATION_USER_INVOLVED_PARTIES (
      APPLICATION_USER_ID UUID NOT NULL,
      INVOLVED_PARTY_ID UUID NOT NULL,
      PRIMARY KEY (APPLICATION_USER_ID, INVOLVED_PARTY_ID),
      CONSTRAINT FK_APPLICATION_USER_INVOLVED_PARTY_USER_ID FOREIGN KEY (APPLICATION_USER_ID) REFERENCES APPLICATION_USER (ID),
      CONSTRAINT FK_APPLICATION_USER_INVOLVED_PARTY_INVOLVED_PARTY_ID FOREIGN KEY (INVOLVED_PARTY_ID) REFERENCES ADVERT_INVOLVED_PARTY (ID)
    );

    CREATE TABLE IF NOT EXISTS PUBLISHED_CASE_ADVERTS (
      CASE_ID UUID NOT NULL,
      ADVERT_ID UUID NOT NULL,
      PRIMARY KEY (CASE_ID, ADVERT_ID),
      CONSTRAINT FK_PUBLISHED_CASE_ADVERT_CASE_ID FOREIGN KEY (CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_PUBLISHED_CASE_ADVERT_ADVERT_ID FOREIGN KEY (ADVERT_ID) REFERENCES ADVERT (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_ADDITION (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      CONTENT TEXT NOT NULL,
      TYPE VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_ADDITIONS (
      CASE_CASE_ID UUID NOT NULL,
      ADDITION_ID UUID NOT NULL,
      PRIMARY KEY (CASE_CASE_ID, ADDITION_ID),
      CONSTRAINT FK_CASE_ADDITIONS_CASE_ID FOREIGN KEY (CASE_CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_CASE_ADDITIONS_ADDITION_ID FOREIGN KEY (ADDITION_ID) REFERENCES CASE_ADDITION (ID)
    );

    -- New case comment data structure
    CREATE TABLE IF NOT EXISTS CASE_ACTION (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      TITLE VARCHAR NOT NULL,
      SLUG VARCHAR NOT NULL,
      PRIMARY KEY (ID)
    );

    CREATE TABLE IF NOT EXISTS COMMENT_V2 (
      ID UUID NOT NULL DEFAULT UUID_GENERATE_V4 (),
      CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      CASE_ID UUID NOT NULL,
      CASE_STATUS_ID UUID NOT NULL,
      CASE_ACTION_ID UUID NOT NULL,
      APPLICATION_USER_CREATOR_ID UUID,
      ADMIN_USER_CREATOR_ID UUID,
      INSTITUTION_CREATOR_ID UUID,
      CASE_STATUS_RECEIVER_ID UUID,
      ADMIN_USER_RECEIVER_ID UUID,
      COMMENT TEXT,
      PRIMARY KEY (ID),
      CONSTRAINT FK_COMMENT_V2_CASE_ID FOREIGN KEY (CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_COMMENT_V2_CASE_STATUS_ID FOREIGN KEY (CASE_STATUS_ID) REFERENCES CASE_STATUS (ID),
      CONSTRAINT FK_COMMENT_V2_CASE_ACTION_ID FOREIGN KEY (CASE_ACTION_ID) REFERENCES CASE_ACTION (ID),
      CONSTRAINT FK_COMMENT_V2_APPLICATION_USER_CREATOR_ID FOREIGN KEY (APPLICATION_USER_CREATOR_ID) REFERENCES APPLICATION_USER (ID),
      CONSTRAINT FK_COMMENT_V2_ADMIN_USER_CREATOR_ID FOREIGN KEY (ADMIN_USER_CREATOR_ID) REFERENCES ADMIN_USER (ID),
      CONSTRAINT FK_COMMENT_V2_INSTITUTION_CREATOR_ID FOREIGN KEY (INSTITUTION_CREATOR_ID) REFERENCES ADVERT_INVOLVED_PARTY (ID),
      CONSTRAINT FK_COMMENT_V2_CASE_STATUS_RECEIVER_ID FOREIGN KEY (CASE_STATUS_RECEIVER_ID) REFERENCES CASE_STATUS (ID),
      CONSTRAINT FK_COMMENT_V2_ADMIN_USER_RECEIVER_ID FOREIGN KEY (ADMIN_USER_RECEIVER_ID) REFERENCES ADMIN_USER (ID)
    );

    CREATE TABLE IF NOT EXISTS CASE_COMMENTS_V2 (
      CASE_ID UUID NOT NULL,
      COMMENT_V2_ID UUID NOT NULL,
      PRIMARY KEY (CASE_ID, COMMENT_V2_ID),
      CONSTRAINT FK_CASE_COMMENTS_V2_CASE_ID FOREIGN KEY (CASE_ID) REFERENCES CASE_CASE (ID),
      CONSTRAINT FK_CASE_COMMENTS_V2_COMMENT_V2_ID FOREIGN KEY (COMMENT_V2_ID) REFERENCES COMMENT_V2 (ID)
    );

    COMMIT;
    `)
  },

  async down(queryInterface) {
    return await queryInterface.sequelize.query(`
    BEGIN;

      DROP TABLE IF EXISTS ADVERT_CATEGORIES CASCADE;

      DROP TABLE IF EXISTS ADVERT_INVOLVED_PARTY CASCADE;

      DROP TABLE IF EXISTS ADVERT_STATUS CASCADE;

      DROP TABLE IF EXISTS ADVERT_CATEGORY CASCADE;

      DROP TABLE IF EXISTS ADVERT_MAIN_CATEGORY CASCADE;

      DROP TABLE IF EXISTS ADVERT_TYPE CASCADE;

      DROP TABLE IF EXISTS ADVERT_DEPARTMENT CASCADE;

      DROP TABLE IF EXISTS ADVERT_ATTACHMENTS CASCADE;

      DROP TABLE IF EXISTS ADVERT CASCADE;

      DROP TABLE IF EXISTS CATEGORY_DEPARTMENT CASCADE;

      DROP TABLE IF EXISTS CASE_STATUS CASCADE;

      DROP TABLE IF EXISTS CASE_TAG CASCADE;

      DROP TABLE IF EXISTS CASE_COMMUNICATION_STATUS CASCADE;

      DROP TABLE IF EXISTS CASE_COMMENT_TITLE CASCADE;

      DROP TABLE IF EXISTS CASE_COMMENT_TYPE CASCADE;

      DROP TABLE IF EXISTS CASE_COMMENT_TASK CASCADE;

      DROP TABLE IF EXISTS CASE_COMMENT CASCADE;

      DROP TABLE IF EXISTS CASE_CASE CASCADE;

      DROP TABLE IF EXISTS CASE_CATEGORIES CASCADE;

      DROP TABLE IF EXISTS CASE_CHANNEL CASCADE;

      DROP TABLE IF EXISTS CASE_CHANNELS CASCADE;

      DROP TABLE IF EXISTS CASE_COMMENTS CASCADE;

      DROP TABLE IF EXISTS SIGNATURE_TYPE CASCADE;

      DROP TABLE IF EXISTS SIGNATURE_MEMBER CASCADE;

      DROP TABLE IF EXISTS SIGNATURE CASCADE;

      DROP TABLE IF EXISTS SIGNATURE_MEMBER_SIGNATURE CASCADE;

      DROP TABLE IF EXISTS CASE_SIGNATURES CASCADE;

      DROP TABLE IF EXISTS ADVERT_SIGNATURES CASCADE;

      DROP TABLE IF EXISTS APPLICATION_ATTACHMENTS CASCADE;

      DROP TABLE IF EXISTS CASE_ATTACHMENTS CASCADE;

      DROP TABLE IF EXISTS APPLICATION_ATTACHMENT CASCADE;

      DROP TABLE IF EXISTS APPLICATION_ATTACHMENT_TYPE CASCADE;

      DROP TABLE IF EXISTS CASE_ADDITIONS;

      DROP TABLE IF EXISTS CASE_ADDITION;

      DROP TABLE IF EXISTS HELLO_WORLD;

      DROP TABLE IF EXISTS PUBLISHED_CASE_ADVERTS;

      DROP TABLE IF EXISTS CATEGORY_CATEGORIES;

      DROP TABLE IF EXISTS SIGNATURE_MEMBERS;

      COMMIT;
    `)
  },
}
