name: Deploy Containers to AWS Dev

on:
  workflow_run:
    workflows: ['Monorepo pipeline - quality']
    branches: ['main']
    types:
      - completed

env:
  AWS_REGION: eu-west-1
  AWS_SHARED_ACCOUNT_ID: 592944621100
  AWS_DEV_ACCOUNT_ID: 555454216281

permissions:
  id-token: write # Required f. IAM Token
  contents: read

jobs:
  build-and-push:
    strategy:
      matrix:
        container:
          [
            official-journal-api,
            official-journal-admin-api,
            official-journal-application-api,
            official-journal-web,
            regulations-api,
            legal-gazette-web,
            legal-gazette-public-web,
            legal-gazette-application-web,
            legal-gazette-api,
          ]
    name: 'Build and push images: ${{ matrix.container }}'
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: ‚ôªÔ∏è Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: üì• Monorepo install
        uses: ./.github/actions/yarn-install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_SHARED_ACCOUNT_ID }}:role/shared-github-ci-role
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: '${{ steps.login-ecr.outputs.registry }}/${{ matrix.container }}'
          tags: |
            latest
            type=sha,prefix=sha-,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag

      - name: Build and push image
        run: yarn nx run ${{ matrix.container }}:container
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TAGS: ${{ steps.meta.outputs.tags }}
          INPUT_PUSH: true

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: development
    strategy:
      matrix:
        container:
          [
            official-journal-api,
            official-journal-admin-api,
            official-journal-application-api,
            official-journal-web,
            regulations-api,
            legal-gazette-web,
            legal-gazette-public-web,
            legal-gazette-application-web,
            legal-gazette-api,
          ]
      fail-fast: false
    name: Deploy to ${{ matrix.container }} - dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_DEV_ACCOUNT_ID }}:role/dev-github-ci-role
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service \
            --cluster dev-dmr-utgafa \
            --service ${{ matrix.container }} \
            --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster dev-dmr-utgafa \
            --services ${{ matrix.container }}
